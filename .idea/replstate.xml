<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1444974514693">{:repl-history {:ide [], :local [&quot;(take 100 array)&quot; &quot;f&quot; &quot;array&quot; &quot;(imgarr)&quot; &quot;(.order buf)&quot; &quot;(def coll (repeatedly #(.getshort buf)))&quot; &quot;coll&quot; &quot;(def coll (repeatedly #(.getShort buf)))&quot; &quot;(take 1000 coll\n      )&quot; &quot;(take 100 coll)&quot; &quot;(take 2000 coll)&quot; &quot;(take 3000 coll)&quot; &quot;(take 5000 coll)&quot; &quot;(take 1000 coll)&quot; &quot;(take 10000\n      coll)&quot; &quot;(get 131072 coll)&quot; &quot;(take 131072 coll)&quot; &quot;(read-file dcmfile)&quot; &quot;()&quot; &quot;(pprint (read-file dcmfile))&quot; &quot;(defn read-image-data\n  [f offset len &amp; rest]\n  (let [buf (ByteBuffer/allocate len)\n        {:keys [byte-order]} rest]\n    (.order buf (case byte-order\n                  :little-endian ByteOrder/LITTLE_ENDIAN\n                  :big-endian ByteOrder/BIG_ENDIAN\n                  ByteOrder/LITTLE_ENDIAN))\n    (doto f\n      (.skip offset)\n      (.read f (.array buf) 0 len))\n    (let [pixel-value-array (short-array (/ len 2))]\n      (.. buf\n          (rewind)\n          (asShortBuffer)\n          (get pixel-value-array))\n      pixel-value-array)))&quot; &quot;(def pixel-value-array (read-image-data dcmfile dcm-img-offset dcm-img-size :byte-order byte-order))&quot; &quot;(get-image-byte-buff)&quot; &quot;(deref (get-image-byte-buff))&quot; &quot;(print (deref (get-image-byte-buff)))&quot; &quot;(def img (deref (get-image-byte-buff)))&quot; &quot;(.get\n  img)&quot; &quot;(aget img 0\n      )&quot; &quot;(aget img 50000\n      )&quot; &quot;(aget img 50000)&quot; &quot;(take 150000 img)&quot; &quot;(take 1500000 img)&quot; &quot;(for [i (take 150000 img)] :when (&gt; i -20))&quot; &quot;(for [i (take 150000 img) :when (&gt; i -20)]  i)&quot; &quot;(for [i (take 150000 img) :while (&gt; i -20)]  i)&quot; &quot;(for [i (take 1500000 img) :while (&gt; i -20)]  i)&quot; &quot;(for [i (take 1500000 img) :when (&gt; i -20)]  i)&quot; &quot;(clear)&quot;], :remote []}}</component>
</project>